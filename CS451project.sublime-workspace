{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"k",
				"key"
			],
			[
				"K",
				"KeyVal"
			],
			[
				"Ke",
				"keySpace1"
			],
			[
				"I",
				"Interfaces"
			],
			[
				"succ",
				"successor_ip"
			],
			[
				"Re",
				"Remove"
			],
			[
				"ke",
				"keySpace1"
			],
			[
				"P",
				"Println"
			],
			[
				"In",
				"Insert"
			],
			[
				"err",
				"errors"
			],
			[
				"str",
				"string"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "package main\n\nimport (\n    // \"bufio\"\n    \"log\"\n    // \"strings\"\n    // \"runtime\"\n    // \"sync\"\n    \"net\"\n    \"net/rpc\"\n    \"net/rpc/jsonrpc\"\n    // \"net/http\"\n    \"os\"\n    \"fmt\"\n    \"errors\"\n    \"hash/fnv\"\n    // \"time\"\n)\n\nvar (\n    successor_ip string = \"\"\n    successor_port string = \"\"\n    predecessor_ip string = \"\"\n    predecessor_port string = \"\"\n    store map[string]string = make(map[string]string)\n)\n\ntype KeyVal struct{\n        Key string\n        Val string\n}\n\ntype AddrPort struct{\n        KeySpace string\n        Val string\n}\n\ntype KeySpace int\n\nfunc hash(s string) uint32 {\n        h := fnv.New32a()\n        h.Write([]byte(s))\n        return h.Sum32()\n}\n\n\n\n\nfunc (t *KeySpace)findSuccessor()\n\n\n// func insertWord(string word, string meaning, stringList synonyms, Type type) error - The error returns either AlreadyExists or OtherServerSideError \nfunc (t *KeySpace)Insert(keyVal KeyVal, reply *Word) error{\n    store[keyVal.key] = keyVal.val\n    return nil\n}\n\n// func removeWord(Word) error - The error contains either UnknownWord or OtherServerSideError.    Make this procedure take 5 seconds using sleep. RemoveWord should also remove this as the synonym from all other words that has this word as its synonym. \nfunc (t *KeySpace)Remove(key string, reply *string) error{\n    _, ok := store[key]\n    if !ok {\n        return errors.New(\"Key not found\")\n    }\n    delete(store, key)\n    return nil\n}\n\n// func lookupWord(string, Word*) error - The error contains either UnknownWord or OtherServerSideError.\nfunc (t *KeySpace)Get(key string, val *string) error{\n    v, ok := store[key]\n    if !ok {\n        return errors.New(\"Key not found\")\n    }\n    *val = v\n    return nil\n}\n\nfunc findSuccessor\n\n\nfunc as_server_for_others() {\n    var l net.Listener\n    var e error\n    if os.Args[1]==\"create\" {\n        l, e = net.Listen(\"tcp\", \":\" + os.Args[2])\n    } else {\n        l, e = net.Listen(\"tcp\", \":\" + os.Args[3])\n    }\n    if e != nil {\n        log.Fatal(\"listen error:\", e)\n    }\n    for {\n        conn, err := l.Accept()\n        if err != nil {\n          log.Printf(\"accept error: %s\", conn)\n          continue\n        }\n        log.Printf(\"connection started: %v\", conn.RemoteAddr())\n        go jsonrpc.ServeConn(conn)\n    }\n}\n\n\nfunc main() {\n    keySpace1 := new(KeySpace)\n    rpc.Register(keySpace1)\n\n    if os.Args[1]!=\"create\" {\n        conn, err := net.Dial(\"tcp\", os.Args[1]+\":\"+os.Args[2])\n        if err != nil {\n            log.Fatal(\"Connectiong:\", err)\n        }\n        client := jsonrpc.NewClient(conn)\n        err = client.Call(\"keySpace1.findSuccessor\", nil, nil)\n        if err != nil {\n            fmt.Println(\"error:\", err)\n        } else {\n            fmt.Println(\"Word Removed\")\n        }\n    }\n    go as_server_for_others()\n    fmt.Println(\"hihi\")\n}\n",
			"file": "cassandra_node/main.go",
			"file_size": 13004,
			"file_write_time": 131372745559565465,
			"settings":
			{
				"buffer_size": 2785,
				"line_ending": "Unix"
			}
		},
		{
			"file": "try/try.go",
			"settings":
			{
				"buffer_size": 624,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "assignment1/wordCount.go",
			"settings":
			{
				"buffer_size": 2074,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS451/assignments/assignment2/server.go",
			"settings":
			{
				"buffer_size": 6143,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS451/assignments/assignment2/sync-client.go",
			"settings":
			{
				"buffer_size": 5742,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/media/kaavee/Windows_partition/Users/Dell/Documents/codes/GO_code/src/CS451/CS451project.sublime-project",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/testcases/question2/question2",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/testcases/question4/question4_1.rkt",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/testcases/question4/question4_2.rkt",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/testcases/question4/question4_3.rkt",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/testcases/question4/question4_4.rkt",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/testcases/question4/question4_5.rkt",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/submissions/160050036/q1_1.rkt",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/submissions/160050036/q1.1",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS152/minor5/submissions/160050036/q1.rkt",
		"/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS451/assignments/assignment2/async-client.go",
		"/media/kaavee/Windows_partition/Users/Dell/Documents/codes/GO_code/src/CS451/assignment2_client/client2.go",
		"/media/kaavee/Windows_partition/Users/Dell/Documents/codes/GO_code/src/CS451/assignment2_tcpclient/client1.go",
		"/media/kaavee/Windows_partition/Users/Dell/Documents/codes/GO_code/src/CS451/assignment2/server.go",
		"/media/kaavee/Windows_partition/Users/Dell/Documents/codes/GO_code/src/CS451/hello_world/hello.go",
		"/C/Users/Dell/Documents/codes/GO_code/src/CS451/assignment2_tcpclient/client1.go",
		"/C/Users/Dell/Documents/codes/GO_code/src/CS451/cassandra_node/client2.go",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/steps/align_si.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/steps/train_deltas.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/steps/decode.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/utils/mkgraph.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/path.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/cmd.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/utils/parse_options.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/local/prepare_dict.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/local/prepare_data.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/gmmbin/gmm-align-compiled.cc",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/steps/train_mono.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/extra/wav.scp",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/extra/text",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/train/wav.scp",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/extra/spk2utt",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/extra/utt2spk",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/train/spk2utt",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/train/utt2spk",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/corpus/data/train/text",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/run.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/gmmbin/gmm-boost-silence.cc",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/egs/assgn2/recipe/utils/analyze_segments.pl",
		"/C/Users/Dell/Documents/codes/JoinEnumeration/PyroJOptimizer/src/pyroj/sqlruntime/rules/transformation/graph/MinCutConservative.java",
		"/C/Users/Dell/Documents/codes/JoinEnumeration/PyroJOptimizer/src/pyroj/sqlruntime/rules/transformation/graph/Graph.java",
		"/C/Users/Dell/Documents/codes/JoinEnumeration/PyroJOptimizer/src/pyroj/sqlruntime/rules/transformation/graph/BitVector.java",
		"/C/Users/Dell/Documents/codes/JoinEnumeration/PyroJOptimizer/src/pyroj/sqlruntime/rules/transformation/graph/GroupByPullUpAboveJoinOP.java",
		"/C/Users/Dell/Documents/codes/JoinEnumeration/PyroJOptimizer/src/pyroj/sqlruntime/rules/transformation/graph/GroupByPushDownToJoinOP.java",
		"/C/Users/Dell/Documents/codes/ASR_project/assgn2/recipe/cmd.sh",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/base/libkaldi-base.so",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/base/Makefile",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/base/.depend.mk",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/base/kaldi-base.a",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/base/kaldi-error.o",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/base/io-funcs.h",
		"/C/Users/Dell/Documents/codes/ASR_project/kaldi/src/base/io-funcs.cc",
		"/C/Users/Dell/Documents/codes/JoinEnumeration/PyroJOptimizer/bin/pyroj/sqlruntime/rules/transformation/graph/GroupByPullUpAboveJoinOP.class"
	],
	"find":
	{
		"height": 60.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"client",
			"dict",
			"String",
			"numgauss",
			"numleaves",
			"scale",
			"mdl",
			"scale_opts",
			"totgauss",
			"num_iters",
			"Pass",
			"align",
			"scale_opts",
			"num_iters",
			"incgauss",
			"totgauss",
			"scale"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"string"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "cassandra_node/main.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2785,
						"regions":
						{
						},
						"selection":
						[
							[
								668,
								668
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 558.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "try/try.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 624,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "assignment1/wordCount.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2074,
						"regions":
						{
						},
						"selection":
						[
							[
								932,
								932
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 48.0,
						"translation.y": 1395.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS451/assignments/assignment2/server.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6143,
						"regions":
						{
						},
						"selection":
						[
							[
								3015,
								3015
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3534.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/media/kaavee/Windows_partition/Users/Dell/Dropbox/notesandbooks/8th_sem/CS451/assignments/assignment2/sync-client.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5742,
						"regions":
						{
						},
						"selection":
						[
							[
								5078,
								5078
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2790.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 52.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "CS451project.sublime-project",
	"replace":
	{
		"height": 112.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 1000.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 760.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 375.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
